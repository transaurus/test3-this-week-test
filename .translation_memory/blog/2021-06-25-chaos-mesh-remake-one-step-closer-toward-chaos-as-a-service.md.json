{
  "source_file_path_relative_to_docusaurus_root": "blog/2021-06-25-chaos-mesh-remake-one-step-closer-toward-chaos-as-a-service.md",
  "source_file_content_hash": "101243859ce7313922cf17f70ebaa31efba6da73b22848bd8930045371fb9d13",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nslug: /chaos-mesh-remake-one-step-closer-towards-chaos-as-a-service\ntitle: 'Chaos Mesh Remake: One Step Closer toward Chaos as a Service'\nauthors:\n  - xiangwang\n  - changyu\nimage: /img/blog/chaos-engineering-tools-as-a-service.jpeg\ntags: [Chaos Mesh, Chaos Engineering]\n---",
      "source_content_hash": "9d9c78e7f0a629f0ed017a97809b32ee4107daceabffb1b8d0ddb6291f7d6abb",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "![Chaos engineering tools](/img/blog/chaos-engineering-tools-as-a-service.jpeg)",
      "source_content_hash": "36de00beebf76fa7acce1241f39d35fce671993c5c8cb209ec998bc825569aa9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![混沌工程工具](/img/blog/chaos-engineering-tools-as-a-service.jpeg)"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "180bddb1",
      "source_content": "[Chaos Mesh](https://chaos-mesh.org/) is a cloud-native Chaos Engineering platform that orchestrates chaos in Kubernetes environments. With Chaos Mesh, you can test your system's resilience and robustness on Kubernetes by injecting all types of faults into Pods, network, file system, and even the kernel.",
      "source_content_hash": "29a00496bd6c7573c2745b72a71344af565a489a271fa07c64b4be128b4616c5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[Chaos Mesh](https://chaos-mesh.org/) 是一個雲原生的混沌工程平台，可在 Kubernetes 環境中協調混亂。透過 Chaos Mesh，您可以將各種故障注入 Pod、網路、檔案系統甚至核心，測試系統在 Kubernetes 環境下的韌性和穩健性。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "28a64196",
      "source_content": "<!--truncate-->",
      "source_content_hash": "f5cded2aa7e288e395fe4f67f9dabda2281904b2f5358d07302b3aa8be0acdfa",
      "node_type": "comment",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_28a64196"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "Since it was open-sourced and accepted by the Cloud Native Computing Foundation (CNCF) as a sandbox project, Chaos Mesh has attracted contributors worldwide and helped users test their systems. Yet it still has a lot of room for improvement:",
      "source_content_hash": "e92adba30f9d73b8079c85fcb966b55bcfb136b99e748d3ac4d1d71154182a12",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "自開源並被雲原生計算基金會（CNCF）接納為沙箱專案以來，Chaos Mesh 吸引了全球貢獻者並協助用戶測試系統。然而仍有許多改進空間："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "632fee71",
      "source_content": "- It needs to improve usability. Some features are complicated to use. For example, when you apply a chaos experiment, you often have to manually check whether the experiment has started.",
      "source_content_hash": "65d00801c0d8f0f473d728bdb5b46191b3aa7cca7ba1b2ff40b4f385f2dab2a8",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 需提升易用性：部分功能操作複雜，例如應用混沌實驗時需手動檢查實驗是否啟動"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2dc10b09",
      "source_content": "- It is mostly for Kubernetes environments. Because Chaos Mesh can't manage multiple Kubernetes clusters, you need to deploy Chaos Mesh for each Kubernetes cluster. Though [chaosd](https://github.com/chaos-mesh/chaosd) supports running chaos experiments on physical machines, the features are quite limited, and command line usage is not user friendly.",
      "source_content_hash": "7a4f8d4bb5b0cf8f09d7d733038a25bfdeac6b07f3c22f5582090454b412d9e3",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 主要適用於 Kubernetes 環境：因無法管理多個 Kubernetes 叢集，需為每個叢集部署 Chaos Mesh。雖然 [chaosd](https://github.com/chaos-mesh/chaosd) 支援實體機混沌實驗，但功能有限且命令列操作不夠友善"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "28563fec",
      "source_content": "- It doesn't allow plugins. To apply a customized chaos experiment, you have to alter the source code. Moreover, Chaos Mesh only supports Golang.",
      "source_content_hash": "b8d3391c6bdeefc7fb91722f9d5b449ec7e3de887f52e7308196331938315ed9",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 不支援外掛機制：需修改原始碼才能應用客製化混沌實驗，且僅支援 Golang"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "Admittedly, Chaos Mesh is a first-rate Chaos Engineering platform, but is still a long way from offering Chaos as a Service (CaaS). Therefore, at [TiDB Hackathon 2020](https://pingcap.com/community-activity/tidb-hackathon-2020/), **we made changes to Chaos Mesh's architecture, moving it one step closer toward CaaS**.",
      "source_content_hash": "a7811e46353b1738d71090f256d30e5df478d7f405afee10189038929a0830d3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Chaos Mesh 無疑是一流的混沌工程平台，但距離提供混沌工程即服務（CaaS）仍有差距。因此在 [TiDB Hackathon 2020](https://pingcap.com/community-activity/tidb-hackathon-2020/) 中，**我們重構了 Chaos Mesh 架構，使其向 CaaS 邁進了一步**。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "In this article, I'll talk about what CaaS is, how we achieve it with Chaos Mesh, and our plans and lessons learned. I hope you find our experience helpful in building your own Chaos Engineering system.",
      "source_content_hash": "608b53b161c4c2b380dacdf571c54d828d3a2daf0ad7e2c39f354784aca783c3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本文將探討 CaaS 的概念、我們如何透過 Chaos Mesh 實現，以及相關規劃與經驗教訓，希望這些經驗對您建立混沌工程系統有所助益。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "fa430ad4",
      "source_content": "## What is Chaos as a Service?",
      "source_content_hash": "c9a6520efe0a765f468691c0b222b0eb2bf0226cf72417a9e0ad739ee84392c8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 什麼是混沌工程即服務（CaaS）？"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "4b1d2d7d",
      "source_content": "As Matt Fornaciari, co-founder of Gremlin, [puts it](https://jaxenter.com/chaos-engineering-service-144113.html), CaaS \"means you will get an intuitive UI, customer support, out-of-the-box integrations, and everything else you need to get experimenting in a matter of minutes.\"",
      "source_content_hash": "f992a616fd3f18f8012902091fd7509cad248b9bc59372dd6e67dae6122fd998",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "正如 Gremlin 共同創辦人 Matt Fornaciari [所述](https://jaxenter.com/chaos-engineering-service-144113.html)，CaaS 意味著「您將獲得直觀的 UI、客戶支援、開箱即用的整合方案，以及數分鐘內即可開始實驗所需的一切」。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "dfe931a2",
      "source_content": "From our perspective, CaaS should offer:",
      "source_content_hash": "d980f1bbd1414a648b56e43a2395c9b3e88fb8c584ad69786db3a3e5bd7ba5e4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們認為 CaaS 應提供："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "212333a8",
      "source_content": "- A unified console for management, where you can edit the configuration and create chaos experiments.",
      "source_content_hash": "91592a1ff091d466160add3b774888f8a92371a0c8be098caf9d6ba6e470a9be",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 統一管理控制台：可編輯配置並創建混沌實驗"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "c0463e48",
      "source_content": "- Visualized metrics for you to see the experiment status.",
      "source_content_hash": "c3708aa6e2c588f558ec161ebd93dacc033bcf1d2dfa48eef64a8519fc296ad6",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 實驗狀態視覺化指標"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2d89eb89",
      "source_content": "- Operations to pause or archive experiments.",
      "source_content_hash": "97ffd98042fb3fe332dd2e25ba9562b94a02066cd454338ccd304e400f17bac6",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 暫停或歸檔實驗的操作功能"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "cc5346ac",
      "source_content": "- Simple interaction. You can easily drag and drop the objects to orchestrate your experiments.",
      "source_content_hash": "d4d78c8164333b4838244b0ef93d84ad24cb072f2414e4641f493cfb0e908809",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 簡易互動：透過拖放物件即可協調實驗"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "135468ee",
      "source_content": "Some companies already adapted Chaos Mesh to meet their own needs, such as [NetEase Fuxi AI Lab](https://pingcap.com/blog/how-a-top-game-company-uses-chaos-engineering-to-improve-testing) and FreeWheel, making it a mock-up for CaaS.",
      "source_content_hash": "b1b4adf97f39325118c8c1a7ac80e6c9c442da7339f8b3e689f3a97afa3582fe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "部分企業如[網易伏羲實驗室](https://pingcap.com/blog/how-a-top-game-company-uses-chaos-engineering-to-improve-testing)和 FreeWheel 已客製化 Chaos Mesh 滿足需求，使其成為 CaaS 的雛形。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "782c902a",
      "source_content": "## Developing Chaos Mesh towards CaaS",
      "source_content_hash": "ba535c90652589c122ce0d5700609bb0bafbd4b4772b46c9cb9b932513395f70",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 推動 Chaos Mesh 邁向 CaaS"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "50746522",
      "source_content": "Based on our understanding of CaaS, we refined the architecture of Chaos Mesh during Hackathon, including improved support for different systems and better observability. You can check out our code in [wuntun/chaos-mesh](https://github.com/wuntun/chaos-mesh/tree/caas) and [wuntun/chaosd](https://github.com/wuntun/chaosd/tree/caas).",
      "source_content_hash": "7475247ead77ec348e1b8c3ce41e183eb2f93d81ca9d16f28c3542a3234529c9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "基於對 CaaS 的理解，我們在駭客松期間優化了 Chaos Mesh 架構，包括增強多系統支援和可觀測性。程式碼詳見 [wuntun/chaos-mesh](https://github.com/wuntun/chaos-mesh/tree/caas) 和 [wuntun/chaosd](https://github.com/wuntun/chaosd/tree/caas)。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "54268405",
      "source_content": "### Refactor Chaos Dashboard",
      "source_content_hash": "f07fdfd82cb23571c08d39a6e039229ba41f3b925cf453891030442c596e06aa",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 重構 Chaos Dashboard"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "8af76f3d",
      "source_content": "The current Chaos Mesh architecture is suited for individual Kubernetes clusters. Chaos Dashboard, the web UI, is bound to a specified Kubernetes environment:",
      "source_content_hash": "344b859c30e06a36c2a4e51dfdc318ffcd042234420b4ff58dd0be9cd897e741",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當前 Chaos Mesh 架構適用於單一 Kubernetes 叢集，其網頁 UI Chaos Dashboard 綁定於特定 Kubernetes 環境："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "![Chaos Mesh architecture](/img/blog/chaos-mesh-remake-architecture.jpeg)",
      "source_content_hash": "e209a9e3ee0ed97ed235c6d8381dcdee9dc88995f471427bd9b3b9bc4461f31a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![Chaos Mesh 架構](/img/blog/chaos-mesh-remake-architecture.jpeg)"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "a44047a5",
      "source_content": "During this refactor, **to allow Chaos Dashboard to manage multiple Kubernetes clusters, we separate Chaos Dashboard from the main architecture**. Now, if you deploy Chaos Dashboard outside of the Kubernetes cluster, you can add the cluster to Chaos Dashboard via the web UI. If you deploy Chaos Dashboard inside the cluster, it automatically obtains the cluster information through environment variables.",
      "source_content_hash": "12724a80e4bb9ea1e6c02d2e0a457661e620d7990967b49efb903846b5fe19f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在此次重構中，**為了讓 Chaos Dashboard 能管理多個 Kubernetes 集群，我們將其從主架構中分離出來**。現在，若將 Chaos Dashboard 部署在 Kubernetes 集群外部，可透過網頁 UI 添加集群；若部署在集群內部，則會透過環境變數自動獲取集群資訊。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "f7ef78f9",
      "source_content": "You can register Chaos Mesh (technically, the Kubernetes configuration) in Chaos Dashboard or ask `chaos-controller-manager` to report to Chaos Dashboard via configuration. Chaos Dashboard and `chaos-controller-manager` interact via CustomResourceDefinitions (CRDs). When `chaos-controller-manager` finds a Chaos Mesh CRD event, it invokes `chaos-daemon` to carry out the related chaos experiment. Therefore, Chaos Dashboard can manage experiments by operating on CRDs.",
      "source_content_hash": "57767ad5d0070c578826aba050aa7f28ff42476ddaaf37c94f3571fa41d549b8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以將 Chaos Mesh（技術上是 Kubernetes 配置）註冊到 Chaos Dashboard，或要求 `chaos-controller-manager` 透過配置向 Chaos Dashboard 報告。Chaos Dashboard 與 `chaos-controller-manager` 透過 CustomResourceDefinitions (CRDs) 互動。當 `chaos-controller-manager` 偵測到 Chaos Mesh CRD 事件時，會調用 `chaos-daemon` 執行相關混沌實驗。因此，Chaos Dashboard 能透過操作 CRDs 來管理實驗。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "60410af6",
      "source_content": "### Refactor chaosd",
      "source_content_hash": "271a9b37579f70e5e8f4c4e8be81c97cea5de1a38b7358bc07d9fe700c4b8b76",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 重構 chaosd"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "chaosd is a toolkit for running chaos experiments on physical machines. Previously, it was only a command line tool and had limited features.",
      "source_content_hash": "748b619be7d1b90cb4c0458a13ea943e897a940195c9f5eb0ee56c2048ff3c01",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "chaosd 是在實體機器上運行混沌實驗的工具包。此前它僅是命令列工具且功能有限。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "![chaosd, a Chaos Engineering command line tool](/img/blog/chaosd-chaos-engineering-command-line-tool.jpeg)",
      "source_content_hash": "0c478497af7deadd08e41da839d928a0a661fe5e72f41a18cd50fe5730b59540",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![chaosd，一個混沌工程命令列工具](/img/blog/chaosd-chaos-engineering-command-line-tool.jpeg)"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "40158b4b",
      "source_content": "During the refactoring, **we enabled chaosd to support the RESTful API and enhanced its services so that it can configure chaos experiments by parsing CRD-format JSON or YAML files**.",
      "source_content_hash": "2355c58040d2cc98a751821ee7922d6ff1c2aafaa0f0b3778918bdf93956f458",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在重構過程中，**我們讓 chaosd 支援 RESTful API 並強化服務，使其能透過解析 CRD 格式的 JSON 或 YAML 檔案來配置混沌實驗**。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "6ea4c715",
      "source_content": "Now, chaosd can register itself to Chaos Dashboard via configuration and send regular heartbeats to Chaos Dashboard. With the heartbeat signals, Chaos Dashboard can manage the chaosd node status. You can also add chaosd nodes to Chaos Dashboard via the web UI.",
      "source_content_hash": "37cc4cb1284937d4b8ad50a4ce209976932c070e9bee22eb5d4298911c01d080",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在，chaosd 可透過配置向 Chaos Dashboard 註冊自身，並定期發送心跳信號。Chaos Dashboard 透過心跳信號管理 chaosd 節點狀態。您也能透過網頁 UI 將 chaosd 節點加入 Chaos Dashboard。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "79ad944d",
      "source_content": "Moreover, **chaosd can now schedule chaos experiments at specified time and manage experiment lifecycles, which unifies the user experience on Kubernetes and on physical machines**.",
      "source_content_hash": "e9de25ec71b9b8c38b081dd35a2fd2e8c2e8d4f2cc9be667221e0998864307ee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此外，**chaosd 現在能排程指定時間的混沌實驗並管理實驗生命週期，這統一了 Kubernetes 與實體機器上的使用者體驗**。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "531437ca",
      "source_content": "With new Chaos Dashboard and chaosd, the optimized architecture of Chaos Mesh is as follows:",
      "source_content_hash": "e861ffb0375dffff49defad3dda0fba7224affc5760f83f4e1771707e5230ea2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "透過新版 Chaos Dashboard 和 chaosd，Chaos Mesh 的優化架構如下："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "06e24cc0",
      "source_content": "![Chaos Mesh's optimized architecture](/img/blog/chaos-mesh-optimized-architecture.jpeg)",
      "source_content_hash": "fb980a518868ce3d6b903fd78a843635748a416af320bbec1086a9d60e830989",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![Chaos Mesh 優化後的架構](/img/blog/chaos-mesh-optimized-architecture.jpeg)"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "ee8401db",
      "source_content": "### Improve observability",
      "source_content_hash": "111043e9333b18c04750c9e9a72fd4f3bf70ca9259d806a232aaa92af717b063",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 提升可觀測性"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "147e8550",
      "source_content": "Another improvement is observability, namely how to tell if an experiment is carried out successfully.",
      "source_content_hash": "e6b41f6db327b74a09b5755faabdff5700b2b2549d060bd4d7ddea5e867c780b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "另一項改進是可觀測性，即如何判斷實驗是否成功執行。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "883231d4",
      "source_content": "Before the improvement, you had to manually check the experiment metrics. If you injected [StressChaos](https://chaos-mesh-website-archived.netlify.app/docs/1.2.4/chaos_experiments/stresschaos) into a Pod, you had to enter the Pod to see if there was a `stress-ng` process and then use `top` commands to check CPU and memory utilization. These metrics told you whether your StressChaos experiment was created successfully.",
      "source_content_hash": "e85bde9faf21632cde82c4c132a7731ff699dc5aeea1a2d8861c2d3eec85903c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "改進前，您必須手動檢查實驗指標。若向 Pod 注入 [StressChaos](https://chaos-mesh-website-archived.netlify.app/docs/1.2.4/chaos_experiments/stresschaos)，需進入 Pod 查看是否存在 `stress-ng` 進程，再用 `top` 命令檢查 CPU 和記憶體使用率。這些指標能判斷 StressChaos 實驗是否成功創建。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "6cc549f2",
      "source_content": "To streamline the process, we now integrate `node_exporter` into `chaos-daemon` and chaosd to collect node metrics. We also deploy `kube-state-metrics` in the Kubernetes cluster, combined with cadvisor, to collect Kubernetes metrics. The collected metrics are saved and visualized by Prometheus and Grafana, which provide a simple method for you to check the experiment status.",
      "source_content_hash": "4a58d95912d0a99752c18af5d8f8d1af1a14a56c4f37a8cf5591a43be25db3a4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為簡化流程，我們將 `node_exporter` 整合至 `chaos-daemon` 和 chaosd 以收集節點指標。同時在 Kubernetes 集群部署 `kube-state-metrics`，結合 cadvisor 收集 Kubernetes 指標。收集的指標由 Prometheus 和 Grafana 儲存並視覺化，提供簡易方法檢查實驗狀態。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "98355e36",
      "source_content": "#### Further improvements needed",
      "source_content_hash": "129a3dd12121af4cef31e912c6f2c2ac3c91136c8fd2ad9c666021d24691b5fa",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 需要進一步的改進"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "7736989b",
      "source_content": "Overall, metrics aim to help you:",
      "source_content_hash": "61c36cc12e590844b0f73d5f0adda214c75de6b3b88d41b83a9ba6b655a7369a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "整體而言，指標旨在協助您："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "659c6b3e",
      "source_content": "- Confirm that chaos is injected.",
      "source_content_hash": "c0b37a8ce6e1d562fd7aee24302fc40f7a8c1813acb7ed60776721d7c544b8af",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 確認混沌注入是否成功。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "6220f8bc",
      "source_content": "- Observe the chaos impact on the service and make periodic analysis.",
      "source_content_hash": "cc04eb24503ac25ff17770305a4302b535f9e5bf1abbb737d5aadf893af0bc44",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 觀察混沌對服務的影響並進行週期性分析。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "771cf34e",
      "source_content": "- Respond to exceptional chaos events.",
      "source_content_hash": "3a8292cbd5be88fb012e9946b04c1dd2d7d640c8b6cda49fac28a8800e6e3d54",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 應對異常混沌事件。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "ec619944",
      "source_content": "To achieve these goals, the system needs to monitor the experiment data metrics, the ordinary metrics, and the experiment events. Chaos Mesh still needs to improve:",
      "source_content_hash": "25c545b5412ba1822126404fb037a84b30fccca4ffdc6fa375d8651f00522a19",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為達成這些目標，系統需監控實驗數據指標、常規指標及實驗事件。Chaos Mesh 仍需改進："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "e2c83a13",
      "source_content": "- Experiment data metrics, such as the exact latency duration of the injected network latency and the specific load of the simulated workload.",
      "source_content_hash": "80fe52f9b33e5684aff278b263ddb3f2ca83a08ca35958fed24ebd7764bea21c",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 實驗數據指標，例如注入的網路延遲確切時長、模擬工作負載的具體壓力值。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "83fc985d",
      "source_content": "- Experiment events; that is, the Kubernetes events of creating, deleting, and running experiments.",
      "source_content_hash": "e13012429397ffe4c07d59b01e2e6f374529bd3af3b50cfc37b44569822999ea",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 實驗事件，即創建、刪除和運行實驗的 Kubernetes 事件。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "5803caac",
      "source_content": "Here is a good example of metrics from [Litmus](https://github.com/litmuschaos/chaos-exporter#example-metrics).",
      "source_content_hash": "c30a7cbea68c46fda738da7f0e98fcf76876035a32dee5c1946d71b26df10518",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[Litmus](https://github.com/litmuschaos/chaos-exporter#example-metrics) 提供了優良的指標範例。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "39db08de",
      "source_content": "## Other proposals for Chaos Mesh",
      "source_content_hash": "6c0c2d577f32304c44cfa68a7e6e42853ec1901e04f8ad8e5f61169d0fc4541b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Chaos Mesh 的其他提案"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "785750ac",
      "source_content": "Because of the limited time at Hackathon, we didn't finish all our plans. Here are some of our proposals for the Chaos Mesh community to consider in the future.",
      "source_content_hash": "dd10d5eb3f46deec38a7c707af287e707db74efc8cc6d0e14bb182741384dc6f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "由於 Hackathon 時間有限，我們未完成所有計畫。以下是供 Chaos Mesh 社群未來參考的部分提案。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "b10963d7",
      "source_content": "### Orchestration",
      "source_content_hash": "612c6dfefe4a30fd0a6948a87e68b23879f1e8dd7118f3d3d12c5cdb8d400074",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 編排"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2822251a",
      "source_content": "A closed loop of Chaos Engineering includes four steps: exploring chaos, discovering deficiencies in the system, analyzing root causes, and sending feedback for improvement.",
      "source_content_hash": "26ea7a367a9350862225a0f6604ff1abb624af608ad8acb066445cb56ac2d6c3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Chaos Engineering 的閉環包含四個步驟：探索混亂、發現系統缺陷、分析根本原因，以及發送回饋進行改進。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "25212439",
      "source_content": "![A closed loop of Chaos Engineering](/img/blog/closed-loop-of-chaos-engineering.jpeg)",
      "source_content_hash": "6ccb59d6057892ec7785306e3feb43123c6af0f35f97dd3447ea7261025eb166",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![Chaos Engineering 的閉環](/img/blog/closed-loop-of-chaos-engineering.jpeg)"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "d79a4831",
      "source_content": "However, **most of the current open source Chaos Engineering tools only focus on exploration and do not provide pragmatic feedback.** Based on the improved observability component, we can monitor chaos experiments in real time and compare and analyze the experiment results.",
      "source_content_hash": "99b3e7aff807afb92075e3895e739392ff42b8f50fe362b33f54dbd26556696e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "然而，**目前大多數開源混沌工程工具僅專注於探索階段，未提供實質性回饋機制。** 基於改進後的可觀測性元件，我們能即時監控混沌實驗，並比對分析實驗結果。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2838eb68",
      "source_content": "With these results, we will be able to realize a closed loop by adding another important component: orchestration. The Chaos Mesh community already proposed a [Workflow](https://github.com/chaos-mesh/rfcs/pull/10/files) feature, which enables you to easily orchestrate and call back chaos experiments or conveniently integrate Chaos Mesh with other systems. You can run chaos experiments in the CI/CD phase or after a canary release.",
      "source_content_hash": "250d95ab782b5192b1e20f1f94c875260a3840ba76ac27884b973436605d2e60",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "透過這些結果，我們可藉由新增關鍵元件「編排」實現閉環。Chaos Mesh 社群已提出 [Workflow](https://github.com/chaos-mesh/rfcs/pull/10/files) 功能，讓您輕鬆編排與回呼混沌實驗，或無縫整合 Chaos Mesh 至其他系統。您可在 CI/CD 階段或金絲雀發布後執行混沌實驗。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "4be28ed1",
      "source_content": "**Combining observability and orchestration makes a closed feedback loop for Chaos Engineering.** If you were to launch a 100 ms network latency test on a Pod, you could observe the latency change using the observability component and check if the Pod service is still available using PromQL or other DSL based on orchestration. If the service was unavailable, you may conclude that the service is unavailable when the latency is >= 100 ms.",
      "source_content_hash": "76b71d35e366f3cce8eeca9a110edabb78f59e878e2383fdf0b8450f73d870ee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**結合可觀測性與編排能力，將形成混沌工程的閉環回饋系統。** 若對 Pod 執行 100 毫秒網路延遲測試，您可透過可觀測性元件監控延遲變化，並使用基於編排的 PromQL 或其他 DSL 驗證 Pod 服務可用性。若服務不可用，即可推論當延遲 >=100 毫秒時服務失效。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "0e80209e",
      "source_content": "But 100 ms is not the threshold of your service; you need to know what is the largest latency your service can handle. By orchestrating the value of the chaos experiment, you'll know what is the threshold value you must ensure to meet your service-level objectives. Also, you'll find out the service performance under different network conditions and whether they meet your expectations.",
      "source_content_hash": "d3f53b21172353e9f385fa4ec1f83fb7b3c1d29fb25a7fb430e647d456df2248",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "但 100 毫秒並非服務的臨界值；您需知曉服務能承受的最大延遲。透過編排混沌實驗數值，您將掌握達成服務級別目標（SLO）的關鍵閾值。同時，您能了解服務在不同網路條件下的效能表現，檢驗是否符合預期。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "d1f76d04",
      "source_content": "### Data format",
      "source_content_hash": "9c59c8ee691c023b60fad772b568715514998337371a7099fdc4705cc23e7f05",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 資料格式"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "6693c38c",
      "source_content": "Chaos Mesh uses CRDs to define its chaos objects. If we can convert CRDs to JSON files, we can achieve communication between components.",
      "source_content_hash": "48f85d6816139f73c4f6452e299b8a76616568d2b0800b2b49955651e4e75c32",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Chaos Mesh 使用 CRD 定義混沌物件。若能將 CRD 轉換為 JSON 檔案，即可實現元件間通訊。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "e9313fef",
      "source_content": "In terms of data format, chaosd just consumes and registers CRD data in JSON format. If a chaos tool can consume CRD data and register itself, it can run chaos experiments in different scenarios.",
      "source_content_hash": "f05049e5d8a8a20c567f012266e395ad0c199ce070365ca0b0b726d0d7d730a8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在資料格式層面，chaosd 僅需接收並註冊 JSON 格式的 CRD 資料。任何混沌工具若能接收 CRD 資料並自行註冊，即可在多種場景執行混沌實驗。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "48155948",
      "source_content": "### Plugins",
      "source_content_hash": "490ae92b33e6ee05d131e3b68dd3591cedd4e2035973f28487600d7077a1ea53",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 外掛機制"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "1958bc43",
      "source_content": "Chaos Mesh has limited support for plugins. You can only [add a new Chaos](https://chaos-mesh-website-archived.netlify.app/docs/1.2.4/development_guides/develop_a_new_chaos/) by registering a CRD in Kubernetes API. This brings about two problems:",
      "source_content_hash": "8c2c289756463e0ff13692200fc2d5602530dfe5fd4cd23c4bcc4b42d913f2ec",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Chaos Mesh 的外掛支援有限。目前僅能透過在 Kubernetes API 註冊 CRD 來[新增混沌實驗](https://chaos-mesh-website-archived.netlify.app/docs/1.2.4/development_guides/develop_a_new_chaos/)，這導致兩大問題："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "c527cf10",
      "source_content": "- You must develop the plugin using Golang, the same language in which Chaos Mesh is written.",
      "source_content_hash": "40ec406da18763cbebefe2c2e58349dff712db2df13a23c0ab9474c0dc7fe6eb",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 必須使用與 Chaos Mesh 相同的 Golang 語言開發外掛。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "643bb07b",
      "source_content": "- You must merge the extended code into the Chaos Mesh project. Because Chaos Mesh doesn't have a security mechanism like Berkeley Packet Filter (BPF), merging plugin code may introduce extra risks.",
      "source_content_hash": "a53a1262fbee91eb8257bfafee155e8e43cdee3f47da409a3e86172dc4a2ecca",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 必須將擴充程式碼合併至 Chaos Mesh 專案。由於缺乏類似 Berkeley Packet Filter (BPF) 的安全機制，合併外掛程式碼可能引入額外風險。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "f38d1cb0",
      "source_content": "To enable full plugin support, we need to explore a new method to add plugins. As Chaos Mesh essentially carries out chaos experiments based on CRD, a chaos experiment only requires generating, listening to, and deleting CRDs. In this regard, we have several ideas worth trying:",
      "source_content_hash": "a28d3cad1cb49df5c35f711a015f41c838a2ba1009ce169a0bedd3f02e5f49fc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為實現完整外掛支援，需探索新的擴充方法。Chaos Mesh 本質基於 CRD 執行混沌實驗，實驗僅需生成、監聽與刪除 CRD。對此我們有幾個可行方案："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "4cc73f5f",
      "source_content": "- Develop a controller or operator to manage CRDs.",
      "source_content_hash": "7a0516229678806e223697eaf4f102aa799f5f90721e4279e13a8dfa64bc4d75",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 開發控制器（controller）或運算子（operator）管理 CRD。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "94153371",
      "source_content": "- Handle CRD events uniformly and operate on CRDs via HTTP callback. This method only uses HTTP APIs, with no requirement on Golang. For an example, see [Whitebox Controller](https://github.com/summerwind/whitebox-controller).",
      "source_content_hash": "7d10858fc641819a9a0bbc64bdea482fc27d9d53ca14c4b8f2551088406143be",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 統一處理 CRD 事件，透過 HTTP 回呼操作 CRD。此方法僅需 HTTP API，無需 Golang 技能，可參考 [Whitebox Controller](https://github.com/summerwind/whitebox-controller)。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2acf42db",
      "source_content": "- Use WebAssembly (Wasm). When you need to call chaos experiment logic, just call the Wasm program.",
      "source_content_hash": "064140fec7851f0d5db52609fa2a5278b7b810f1c73bb7efed840956864523a0",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 採用 WebAssembly (Wasm)。需呼叫混沌實驗邏輯時，直接執行 Wasm 程式。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "7387b539",
      "source_content": "- Use SQL to query the chaos experiment status. Because Chaos Mesh is based on CRDs, you can use SQL to operate on Kubernetes. Examples include [Presto connector](https://github.com/xuxinkun/kubesql) and [osquery extension](https://github.com/aquasecurity/kube-query).",
      "source_content_hash": "8af57f4a508863434700dfe5552f8cb1601bc914059ce288c94354bba16e8547",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 使用 SQL 查詢混沌實驗狀態。基於 CRD 特性，可直接用 SQL 操作 Kubernetes，例如 [Presto connector](https://github.com/xuxinkun/kubesql) 與 [osquery extension](https://github.com/aquasecurity/kube-query)。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "1cf42f92",
      "source_content": "- Use SDK-based extensions, such as [Chaos Toolkit](https://docs.chaostoolkit.org/reference/api/experiment/).",
      "source_content_hash": "6f48d8a526c1c6f7d8025a3be242862471e69f269007f9cb6489602ff2b1d2df",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 採用 SDK 擴充方案，例如 [Chaos Toolkit](https://docs.chaostoolkit.org/reference/api/experiment/)。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "47cd8dd6",
      "source_content": "### Integration with other Chaos tools",
      "source_content_hash": "82e4f55e26e472a2268dd377c88fc6b317afee2783b82bb47be463a0e2ea8909",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 混沌工具整合"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "692c6053",
      "source_content": "For real-world systems, a single Chaos Engineering tool can hardly exhaust all possible use cases. That's why integrating with other chaos tools can make the Chaos Engineering ecosystem more powerful.",
      "source_content_hash": "d56a8e34ccd349937092c244afbeea1e93ee63fc740a5638b0d3a8eae5964f4f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在真實系統中，單一混沌工程工具難以覆蓋所有用例。因此整合其他混沌工具，將大幅強化混沌工程生態系能力。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "383fbdd2",
      "source_content": "There are numerous Chaos Engineering tools on the market. Litmus's [Kubernetes implementation](https://github.com/litmuschaos/litmus-go/tree/2.14.1/chaoslib/powerfulseal) is based on [PowerfulSeal](https://github.com/powerfulseal/powerfulseal), while its [container implementation](https://github.com/litmuschaos/litmus-go/tree/2.14.1/chaoslib/pumba) is based on [Pumba](https://github.com/alexei-led/pumba). [Kraken](https://github.com/cloud-bulldozer/kraken) focuses on Kubernetes, [AWSSSMChaosRunner](https://github.com/amzn/awsssmchaosrunner) focuses on AWS, and [Toxiproxy](https://github.com/shopify/toxiproxy) targets TCP. There are also merging projects based on [Envoy](https://docs.google.com/presentation/d/1gMlmXqH6ufnb8eNO10WqVjqrPRGAO5-1S1zjcGo1Zr4/edit#slide=id.g58453c664c_2_75) and Istio.",
      "source_content_hash": "84a785d96ac15dd6ad8b9ab322b8386ec5b101ab4e0366cd0a160b2142fd514a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "市場上有眾多混沌工程工具。Litmus 的 [Kubernetes 實現](https://github.com/litmuschaos/litmus-go/tree/2.14.1/chaoslib/powerfulseal)基於 [PowerfulSeal](https://github.com/powerfulseal/powerfulseal)，而其[容器實現](https://github.com/litmuschaos/litmus-go/tree/2.14.1/chaoslib/pumba)則基於 [Pumba](https://github.com/alexei-led/pumba)。[Kraken](https://github.com/cloud-bulldozer/kraken) 專注於 Kubernetes，[AWSSSMChaosRunner](https://github.com/amzn/awsssmchaosrunner) 專注於 AWS，而 [Toxiproxy](https://github.com/shopify/toxiproxy) 則針對 TCP。此外還有基於 [Envoy](https://docs.google.com/presentation/d/1gMlmXqH6ufnb8eNO10WqVjqrPRGAO5-1S1zjcGo1Zr4/edit#slide=id.g58453c664c_2_75) 和 Istio 的合併專案。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "14bc6b75",
      "source_content": "To manage the various chaos tools, we may need a uniform pattern, such as [Chaos Hub](https://hub.litmuschaos.io/).",
      "source_content_hash": "b5c2bacecfc74b41600a1813106c5c3816fd378f0e91f9e10f8e9474e9dabe34",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為管理各種混沌工具，我們可能需要統一模式，例如 [Chaos Hub](https://hub.litmuschaos.io/)。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "5dba1427",
      "source_content": "## Voices from the community",
      "source_content_hash": "02b50ffc7e731484964970c96a961beedbb2fb3311edda4cd650c33ce5227a7a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 來自社群的呼聲"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "534ac82e",
      "source_content": "Here, we'd like to share how a leading cyber security company in China as well as a Chaos Mesh user, adapts Chaos Mesh to meet their needs. Their adaptation has three aspects: physical node, container, and application.",
      "source_content_hash": "5ad5a10c0962d010054efff7fd92038de07057f6e4e4f6e1bedace8e45d32270",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在此，我們分享中國一家領先網絡安全公司（同時也是 Chaos Mesh 使用者）如何調整 Chaos Mesh 以滿足其需求。他們的調整分為三個層面：實體節點、容器和應用程式。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "0d5321b7",
      "source_content": "### Physical node",
      "source_content_hash": "882f87c803638330f07cb0fd4792ab66771569dc829bb9aa6bfc9a5bcb93692c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 實體節點"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "d605d735",
      "source_content": "- Support executing scripts on physical servers. You can configure the script directory in CRDs and run your scripts using `chaos-daemon`.",
      "source_content_hash": "4bcbd0617b231fe581c693d31fdf5e81e9d3d1a9d7d23fac0f3a576090a22aca",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 支援在實體伺服器上執行腳本。您可在 CRD 中配置腳本目錄，並透過 `chaos-daemon` 執行腳本。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "df438a32",
      "source_content": "- Simulate reboot, shutdown, and kernel panic using the customized script.",
      "source_content_hash": "253f09dc64e14819c93ddbcb71599d30ee6388a8c00cc7d999db5509264acfbb",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 使用自訂腳本模擬重啟、關機和核心恐慌。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "c82897fb",
      "source_content": "- Shut down the node's NIC using the customized script.",
      "source_content_hash": "f905c21d60a1da5a147b0c9eb3c7a7222db3dfcab6a7c53efc4445076f66ba08",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 使用自訂腳本關閉節點的網路介面卡（NIC）。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "5111d37e",
      "source_content": "- Create frequent context switching using sysbench to simulate the \"noisy neighbor\" effect.",
      "source_content_hash": "78bb67481067aa240dd81ac4b71c6982b51fd7bb7e6a3b12ee0eca63ed68c83c",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 使用 sysbench 建立頻繁的上下文切換，模擬「嘈雜鄰居」效應。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "6483b92b",
      "source_content": "- Intercept the container's system call using BPF's `seccomp`. This is achieved by passing and filtering PIDs.",
      "source_content_hash": "91cdbd713476e9aa878b01b0e9f5253ab37e23609bd920cc6ae57aad74611ecb",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 透過傳遞和過濾 PID，使用 BPF 的 `seccomp` 攔截容器系統呼叫。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "6ab1b234",
      "source_content": "### Container",
      "source_content_hash": "9262a7d8f171482844ae133746ce201e183c1243d85fdface312491273f3ba9c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 容器"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "f545c46e",
      "source_content": "- Randomly change the number of Deployment replicas to test if the application's traffic is abnormal.",
      "source_content_hash": "e6618dfc47ee4978fb548d57636dda1a7f33aad3c04cb1a10fec1f085d61cdce",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 隨機變更 Deployment 副本數量，測試應用程式流量是否異常。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "94345bae",
      "source_content": "- Embed based on CRD objects: fill Ingress objects in chaos CRDs to simulate the speed limit of the interface.",
      "source_content_hash": "0521dcdb1860768e334980073ea128e98884334cd19bd49c15616d74eb580bb7",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 基於 CRD 物件嵌入：在混沌 CRD 中填入 Ingress 物件以模擬介面速率限制。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "738a4712",
      "source_content": "- Embed based on CRD objects: fill Cilium network policy objects in chaos CRDs to simulate fluctuating network conditions.",
      "source_content_hash": "f869f5b4201dcb336c24f1ff0a4d84a01ccdc2d2f767f20ad106cac31b0ab95a",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 基於 CRD 物件嵌入：在混沌 CRD 中填入 Cilium 網路政策物件以模擬波動網路狀況。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "97afbaf0",
      "source_content": "### Application",
      "source_content_hash": "5c919a6496f9f7dbd658cb1c7dd591eacfa5ba1e1539a8e3561540c46619692f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 應用程式"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "38c0ec8b",
      "source_content": "- Support running customized jobs. Currently, Chaos Mesh injects chaos using `chaos-daemon`, which doesn't guarantee fairness and affinity of scheduling. To address this issue, we can use `chaos-controller-manager` to directly create jobs for different CRDs.",
      "source_content_hash": "a2201c5c11041b98e39b114e5378a218a0bd4451c4a0dbae2e0b3bb0e761beaa",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 支援執行自訂任務。目前 Chaos Mesh 透過 `chaos-daemon` 注入混沌，不保證排程公平性與親和性。為解決此問題，可使用 `chaos-controller-manager` 直接為不同 CRD 建立任務。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "6cd03926",
      "source_content": "- Support running [Newman](https://github.com/postmanlabs/newman) in customized jobs to randomly change HTTP parameters. This is to implement chaos experiments on the HTTP interface, which happens when a user performs exceptional behaviors.",
      "source_content_hash": "b840ef2a5c75d39d23dfbf5530edb21087e8353e8f09622c2466e1b0494ef271",
      "node_type": "listItem",
      "translatable": true,
      "translations": {
        "zh-hant": "- 支援在自訂任務中執行 [Newman](https://github.com/postmanlabs/newman)，隨機變更 HTTP 參數。這用於在 HTTP 介面實施混沌實驗，模擬使用者執行異常行為時的情況。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "7312e69e",
      "source_content": "## Summary",
      "source_content_hash": "30ac03ff33731529441be8fbe52a3bd0d4c5ec830e806d54692168ebb7f98ada",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 總結"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2dbfc5f7",
      "source_content": "Traditional fault testing targets specific points in the system that are anticipated to be vulnerable. It is often an assertion: a specific condition produces a specific result.",
      "source_content_hash": "55264be3086ea6196931b3e5b4e383cffa760db9093b482dba02a04f8306551d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "傳統故障測試針對系統中預期易受攻擊的特定點，通常是斷言式：特定條件產生特定結果。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "6b40e7a2",
      "source_content": "**Chaos Engineering is more powerful in that it helps you discover the \"unknown unknowns.\"** By exploring in the broader domain, Chaos Engineering deepens your knowledge of the system being tested and unearths new information.",
      "source_content_hash": "6e808f022fb8c47262f13468c53924c350c809fc6803658d946399a081fd92fc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**混沌工程更強大之處在於幫助您發現「未知的未知」**。透過在更廣泛領域探索，混沌工程加深您對被測系統的理解，並挖掘出新資訊。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "39f476dc",
      "source_content": "To sum up, these are some of our personal thoughts and practice on Chaos Engineering and Chaos Mesh. Our Hackathon project is not ready for production yet, but we hope to shed some light on CaaS and draft a promising roadmap for Chaos Mesh. If you're interested in building Chaos as a Service, [join our Slack](https://slack.cncf.io/) (#project-chaos-mesh)!",
      "source_content_hash": "489719f8782ee386bdba9e8187b347b50a65e7dd0284e3aede8ce0d27d898406",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "總而言之，這些是我們對混沌工程與 Chaos Mesh 的個人思考與實踐。我們的駭客松專案尚未投入生產，但希望能闡明 CaaS（混沌即服務），並為 Chaos Mesh 繪製前瞻性路線圖。若您有興趣建構混沌即服務，[請加入我們的 Slack](https://slack.cncf.io/) (#project-chaos-mesh)！"
      },
      "invalid_translations": {}
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2021-06-25-chaos-mesh-remake-one-step-closer-toward-chaos-as-a-service.md",
  "last_updated_timestamp": "2025-07-04T06:49:56.065967+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "101243859ce7313922cf17f70ebaa31efba6da73b22848bd8930045371fb9d13"
  }
}